//ETKUtils.eps

import TriggerEditor.ETKUnit;
import TriggerEditor.ETKConstants;
import TriggerEditor.ETKTimer;
import TriggerEditor.TETools as te;
import customText as ct;

function abs(n) {
	return n.AtLeast(1<<31) ? -n : n;
}

function SetPColor(pnum ,color) {
    const pcolor_dst = 0x581D76 + 8 * pnum;
    const mcolor_dst = 0x581DD6 + pnum;
    bwrite(pcolor_dst, color);
    bwrite(mcolor_dst, color);
}

function BuildCheckEPD(unitEPD ,unitType) {
    if(
        wread_epd(unitEPD + 0x098 / 4,  0x098 % 4) == unitType || 
        wread_epd(unitEPD + 0x09A / 4,  0x09A % 4) == unitType || 
        wread_epd(unitEPD + 0x09C / 4,  0x09C % 4) == unitType || 
        wread_epd(unitEPD + 0x09E / 4,  0x09E % 4) == unitType || 
        wread_epd(unitEPD + 0x0A0 / 4,  0x0A0 % 4) == unitType
    ){
        return True;
    }
    return False;
}
function EUDMoveLocation(Location ,X ,Y) {
    addloc(Location, X, Y);
}

function SetLocationToUnitEPD(Location ,unit ,X ,Y) {
    const xpos = wread_epd(unit + X / 4, 0);
    const ypos = wread_epd(unit + Y / 4, 2);
    setloc(Location, xpos, ypos);
}

function setLocationToPoint(location, x, y) {
    setloc(location, x, y);
}

function moveReplacerLocationToPoint(x, y) {
    setLocationToPoint($L("_Replacer"), x, y);
}

function EUDTurbo() {
	SetMemory(0x6509A0, SetTo, 0);
}

function getNextUnitEPD(){
	return epdread_epd(EPD(0x628438));
}

function getNextUnitPtr(){
	return dwread_epd(EPD(0x628438));
}

function CUnitInLocation(unit, location) {
	const locTable = EPD(0x58DC4C);
	const lx1 = dwread_epd(locTable + location * 5);
	const lx2 = dwread_epd(locTable + location * 5 + 2);
	const ly1 = dwread_epd(locTable + location * 5 + 1);
	const ly2 = dwread_epd(locTable + location * 5 + 3);
	
	const ux = ETKUnit.getPositionX(unit);
	const uy = ETKUnit.getPositionY(unit);
	
	return ux >= lx1 && ux <= lx2 && uy >= ly1 && uy <= ly2;
}

function decrementTimers(timerVar) {
	const timers = EUDArray.cast(timerVar);
	for (var i = 0; i < 5; i++) {
		if (timers[i] > 0) {
			timers[i] -= 1;
		}
	}
}

function displayTimers(timersVar) {
	const timers = EUDArray.cast(timersVar);
	for (var i = 0; i < 5; i++) {
		if (timers[i] > 0) {
			ct.chatAnnouncement(timers[i]);
		}
	}
}

function moveReplacerLocationToUnit(unit) {
	SetLocationToUnitEPD($L("_Replacer"), unit, 0x028, 0x02A);
}

function createImageSpriteAtLocation(image, location) {
	SetMemoryX(0x00666458, SetTo, image, 0x0000ffff);
	CreateUnit(1, "Scanner Sweep", location, $P8);
	RemoveUnit("Scanner Sweep", AllPlayers);	
	SetMemoryX(0x00666458, SetTo, 546, 0x0000ffff);
}

function createImageSpriteAtUnitPosition(unit, image) {
	//EUDMoveLocation($L("_Replacer"), ETKUnit.getPositionX(unit), ETKUnit.getPositionY(unit));
	moveReplacerLocationToUnit(unit);
	createImageSpriteAtLocation(image, $L("_Replacer"));
}

function createImageSpriteAtUnitPositionDelayed(unit, image, time) {
	ETKTimer.add(time, unit, EUDFuncPtr (1, 0) (function(callbackUnit) {
		createImageSpriteAtUnitPosition(callbackUnit, image);
	}));
}

function createImageSpriteAtUnitPositionWithOffset(unit, image, xOffset, yOffset) {
	moveReplacerLocationToUnit(unit);
	EUDMoveLocation($L("_Replacer"), xOffset, yOffset);
	createImageSpriteAtLocation(image, $L("_Replacer"));
}

function dealDamageToPlayerUnitsAtLocation(damage, location, playerIndexStart, playerIndexEnd) {
	foreach(player : EUDLoopRange(playerIndexStart, playerIndexEnd)) {
		foreach(ptr, enemyUnit : EUDLoopPlayerUnit(player)) {
			if (CUnitInLocation(enemyUnit, location)) {
				const hp = ETKUnit.getHitpoints(enemyUnit);
				if (damage >= hp) {
					ETKUnit.setOrder(enemyUnit,ETKConstants.Order_Die);
				} else {
					ETKUnit.setHitpoints(enemyUnit, hp - damage);
				}
			}
		}
	}
}

function displayNotEnoughEnergyMessage(playerID) {
	//Not implemented
	
}

function findUnitOfType(unitType, playerID) {
	foreach(ptr, unit : EUDLoopPlayerUnit(playerID)) {
		if (ETKUnit.getUnitType(unit) == unitType) {
			return unit;
		}
	}
	return 0;
}

function findUnitOfTypePtr(unitType, playerID) {
	foreach(ptr, unit : EUDLoopPlayerUnit(playerID)) {
		if (ETKUnit.getUnitType(unit) == unitType) {
			return ptr;
		}
	}
	return 0;
}	

function findUnitOfTypeInLocation(location, unitType, playerID) {
	foreach(ptr, unit : EUDLoopPlayerUnit(playerID)) {
		if (ETKUnit.getUnitType(unit) == unitType) {
			if (CUnitInLocation(unit, location)) {
				return unit, ptr;
			}
		}
	}
	return 0, 0;
}	

function findUnitOfTypesInLocation(location, unitTypes: EUDArray, unitTypesCount, playerID) {
	foreach(ptr, unit : EUDLoopPlayerUnit(playerID)) {
		for(var i = 0; i < unitTypesCount; i++) {
			if (ETKUnit.getUnitType(unit) == unitTypes[i]) {
				if (CUnitInLocation(unit, location)) {
					return unit, ptr;
				}
			}
		}
	}
	return 0, 0;
}

function createUnit(unitType, location, playerID) {
	const epd = getNextUnitEPD();
	const ptr = getNextUnitPtr();
	CreateUnit(1,unitType, location, playerID);
	return epd, ptr;
}


function canExecuteCustomTargetAbility(unit, orderID, energy, targetingMode, playerTargetingMode) {
	// Assuming current player
	if (!ETKUnit.getOrder(unit) == orderID) {
		return false;
	}
	
	if (!ETKUnit.hasEnergy(unit, energy)) {
		ct.chatAnnouncement("Not enough energy");
		return false;
	}
	
	if (targetingMode == 1 && !ETKUnit.isOrderTargetUnitValid(unit)) {
		ct.chatAnnouncement("Must target units");
		return false;
	}

	return true;
}

function unitHasOverlay(unit) {
	foreach(overlayUnitRaw, overlayUnit : EUDLoopPlayerUnit($P8)) {
		if (ETKUnit.getUnitType(overlayUnit) == $U("Protoss Corsair") && ETKUnit.getConnectedUnit(overlayUnit) == unit) {
			return true;
		}
	}
	return false;
}

function createOverlayForUnit(unit, imageID, removeTimer) {
	if (unitHasOverlay(unit)) {
		return;
	}
	moveReplacerLocationToUnit(unit);
	wwrite(0x665AC0 + 1696 + 487 * 2, imageID);
	const overlayUnit, tmp = createUnit($U("Protoss Corsair"), $L("_Replacer"), $P8);
	SetMemoryEPD(unit + 0x0DC / 4, SetTo, 0x00130001);
	ETKUnit.setConnectedUnit(overlayUnit, unit);
	if (removeTimer > 0) {
		ETKUnit.setRemoveTimer(overlayUnit, removeTimer);
	}
}